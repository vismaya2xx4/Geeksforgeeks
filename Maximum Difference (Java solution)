class Solution {
    public int findMaxDiff(int[] arr) {
        int n = arr.length;
        int[] larr = new int[n];
        int[] rarr = new int[n];
        Stack<Integer> st = new Stack<>();
        
        for (int i = 0; i < n; i++) {
            while (!st.isEmpty() && st.peek() >= arr[i]) {
                st.pop();
            }
            if (st.isEmpty())  larr[i] = 0;
            else larr[i] = st.peek();
            st.push(arr[i]);
        }

       
        st.clear();

        
        for (int i = n - 1; i >= 0; i--) {
            while (!st.isEmpty() && st.peek() >= arr[i]) {
                st.pop();
            }
           if(st.isEmpty()) rarr[i] = 0;
           else rarr[i] = st.peek();
            st.push(arr[i]);
        }

       
        int maximumDiff = 0;
        for (int i = 0; i < n; i++) {
            int difference = Math.abs(larr[i] - rarr[i]);
            if (difference > maximumDiff) {
                maximumDiff = difference;
            }
        }

        return maximumDiff;
    }
}
